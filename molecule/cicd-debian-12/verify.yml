---
# Don't forget to keep this file updated
# molecule/<scenario>/verify.yml
- name: "Verify"
  hosts: "cicd-debian-12"
  gather_facts: false
  tasks:

    - name: "Verify ELASTICSEARCH"
      when: inv_install_elasticsearch | default(false)
      block:
        - name: "Get Elasticsearch service current state"
          register: install_elasticsearch__service_status
          failed_when: not install_elasticsearch__service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "elasticsearch"

        - name: "Check Elasticsearch folders and conf"
          when: inv_install_elasticsearch__ssl | default(false)
          loop:
            - "{{ inv_install_elasticsearch__ssl_key }}"
            - "{{ inv_install_elasticsearch__ssl_crt }}"
          loop_control:
            loop_var: folder_path
          register: folder_path
          failed_when: not folder_path.stat.exists
          ansible.builtin.stat:
            path: "{{ folder_path }}"

        - name: "Verify all configured datas"
          when: inv_install_elasticsearch__client_auth | default(false)
          block:
            - name: "Check Elasticsearch user's elastic password on each nodes, with client auth"
              register: cluster_infos
              failed_when: cluster_infos.status != 200
              changed_when: cluster_infos.status != 200
              ansible.builtin.uri:
                url: "https://localhost:{{ inv_install_elasticsearch__port }}/_cluster/health?wait_for_status=yellow&timeout=50s&pretty"
                method: GET
                user: "elastic"
                password: "{{ inv_install_elasticsearch__elastic_password }}"
                headers:
                  Content-Type: "application/json"
                client_cert: "{{ inv_install_elasticsearch__ssl_crt }}"
                client_key: "{{ inv_install_elasticsearch__ssl_key }}"
                force_basic_auth: yes

            - name: "Verfify cluster name"
              failed_when: cluster_infos.json.cluster_name != inv_install_elasticsearch__cluster_name
              ansible.builtin.setup:

            - name: "Verfify datas nodes"
              failed_when: cluster_infos.json.number_of_data_nodes != ansible_play_hosts | length
              ansible.builtin.setup:

            - name: "Verfify cluster number nodes"
              failed_when: cluster_infos.json.number_of_nodes != ansible_play_hosts | length
              ansible.builtin.setup:

        - name: "Verify all configured datas"
          when: not (inv_install_elasticsearch__client_auth | default(false))
          block:
            - name: "Check Elasticsearch user's elastic password on each nodes, without client auth"
              register: cluster_infos
              failed_when: cluster_infos.status != 200
              changed_when: cluster_infos.status != 200
              ansible.builtin.uri:
                url: "https://localhost:{{ inv_install_elasticsearch__port }}/_cluster/health?wait_for_status=yellow&timeout=50s&pretty"
                method: GET
                user: "elastic"
                password: "{{ inv_install_elasticsearch__elastic_password }}"
                headers:
                  Content-Type: "application/json"
                force_basic_auth: yes

            - name: "Verfify cluster name"
              failed_when: cluster_infos.json.cluster_name != inv_install_elasticsearch__cluster_name
              ansible.builtin.setup:

            - name: "Verfify datas nodes"
              failed_when: cluster_infos.json.number_of_data_nodes != ansible_play_hosts | length
              ansible.builtin.setup:

            - name: "Verfify cluster number nodes"
              failed_when: cluster_infos.json.number_of_nodes != ansible_play_hosts | length
              ansible.builtin.setup:

    - name: "Verify LOGSTASH"
      when: inv_install_logstash | default(false)
      block:
        - name: "Get Logstash service current state"
          register: install_logstash__service_status
          failed_when: not install_logstash__service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "logstash"

        - name: "Check Logstash folders and conf"
          block:
            - name: "Check Logstash folders"
              loop:
                - "{{ inv_install_logstash__config_path }}"
                - "{{ inv_install_logstash__data_path }}"
              loop_control:
                loop_var: folder_path
              register: folder_check
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ folder_path }}"

            - name: "Check Logstash health check pipeline folder"
              register: folder_check
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ inv_install_logstash__pipelines_path }}/{{ inv_install_logstash__health_check_pipeline.name }}.conf"

            - name: "Check Logstash pipelines folders"
              loop: "{{ inv_install_logstash__pipelines }}"
              loop_control:
                loop_var: pipeline
              register: folder_check
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ inv_install_logstash__pipelines_path }}/{{ pipeline.name }}/beats.conf"

        - name: "Check Logstash API"
          when: inv_install_logstash__api
          block:
            - name: "Check unprotected API HTTP URL"
              when: inv_install_logstash__api_auth_type != "basic" and not inv_install_logstash__api_ssl
              register: result
              failed_when: result.status != 200
              ansible.builtin.uri:
                url: "http://localhost:{{ inv_install_logstash__api_ports }}/"
                method: "GET"

            - name: "Check protected API HTTP URL"
              when: inv_install_logstash__api_auth_type == "basic" and not inv_install_logstash__api_ssl
              register: result
              failed_when: result.status != 200
              ansible.builtin.uri:
                url: "http://localhost:{{ inv_install_logstash__api_ports }}/"
                method: "GET"
                force_basic_auth: true
                user: "{{ inv_install_logstash__api_auth_login }}"
                password: "{{ inv_install_logstash__api_auth_password }}"

            - name: "Check protected API HTTPS URL (check password failure)"
              when: inv_install_logstash__api_auth_type == "basic" and not inv_install_logstash__api_ssl
              register: result
              failed_when: result.status != 401
              ansible.builtin.uri:
                url: "http://localhost:{{ inv_install_logstash__api_ports }}/"
                method: "GET"
                force_basic_auth: true
                user: "BAD-{{ inv_install_logstash__api_auth_login }}"
                password: "BAD-{{ inv_install_logstash__api_auth_password }}"

            - name: "Check unprotected API HTTPS URL"
              when: inv_install_logstash__api_auth_type != "basic" and inv_install_logstash__api_ssl
              register: result
              failed_when: result.status != 200
              ansible.builtin.uri:
                url: "https://localhost:{{ inv_install_logstash__api_ports }}/"
                method: "GET"

            - name: "Check protected API HTTPS URL"
              when: inv_install_logstash__api_auth_type == "basic" and inv_install_logstash__api_ssl
              register: result
              failed_when: result.status != 200
              ansible.builtin.uri:
                url: "https://localhost:{{ inv_install_logstash__api_ports }}/"
                method: "GET"
                force_basic_auth: true
                user: "{{ inv_install_logstash__api_auth_login }}"
                password: "{{ inv_install_logstash__api_auth_password }}"

            - name: "Check protected API HTTPS URL (check password failure)"
              when: inv_install_logstash__api_auth_type == "basic" and inv_install_logstash__api_ssl
              register: result
              failed_when: result.status != 401
              ansible.builtin.uri:
                url: "https://localhost:{{ inv_install_logstash__api_ports }}/"
                method: "GET"
                force_basic_auth: true
                user: "BAD-{{ inv_install_logstash__api_auth_login }}"
                password: "BAD-{{ inv_install_logstash__api_auth_password }}"

        - name: "Check Logstash pipelines"
          block:
            - name: "Check Logstash pipelines connectivities"
              loop: "{{ inv_install_logstash__pipelines }}"
              loop_control:
                loop_var: pipeline
              ansible.builtin.wait_for:
                host: "localhost"
                port: "{{ pipeline.beats[0] }}"
                timeout: 120

    - name: "Verify KIBANA"
      when: inv_install_kibana | default(false)
      block:
        - name: "Get Kibana service current state"
          register: install_kibana__service_status
          failed_when: not install_kibana__service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "kibana"

        - name: "Check Kibana folders and conf"
          when: inv_install_kibana__ssl | default(false)
          loop:
            - "{{ inv_install_kibana__ssl_crt }}"
            - "{{ inv_install_kibana__ssl_key }}"
          loop_control:
            loop_var: folder_path
          register: folder_path
          failed_when: not folder_path.stat.exists
          ansible.builtin.stat:
            path: "{{ folder_path }}"

        - name: "Check Kibana connectivity"
          ansible.builtin.wait_for:
            host: "127.0.0.1"
            port: "{{ inv_install_kibana__port }}"
            timeout: 120

    - name: "Verify APACHE2"
      when: inv_install_apache | default(false)
      block:
        - name: "Get Apache2 service current state"
          register: install_apache__service_status
          failed_when: not install_apache__service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "apache2"

        - name: "Check Apache2 folders and conf"
          loop:
            - "/etc/apache2/apache2.conf"
            - "/etc/apache2/ports.conf"
          loop_control:
            loop_var: folder_path
          register: folder_check
          failed_when: not folder_check.stat.exists
          ansible.builtin.stat:
            path: "{{ folder_path }}"

        - name: "Check Apache2 HTTP connectivity"
          ansible.builtin.wait_for:
            host: "localhost"
            port: "{{ inv_install_apache__http_listen_port }}"
            timeout: 120

        - name: "Check Apache2 HTTPS connectivity"
          ansible.builtin.wait_for:
            host: "localhost"
            port: "{{ inv_install_apache__https_listen_port }}"
            timeout: 120

        - name: "Get Apache2 service current state"
          register: apache_service_status
          failed_when: not apache_service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "apache2"

        - name: "Check Apache2 default configuration"
          block:
            - name: "Check Apache2 folders and conf"
              loop:
                - "/etc/apache2/apache2.conf"
                - "/etc/apache2/ports.conf"
              loop_control:
                loop_var: folder_path
              register: folder_check
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ folder_path }}"

            - name: "Check Apache2 HTTP and conf"
              loop: "{{ inv_add_apache_confs__configurations }}"
              loop_control:
                loop_var: vhost
              register: folder_check
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ inv_add_apache_confs__conf_path }}/{{ vhost.server.name }}-HTTP.conf"

            - name: "Check Apache2 HTTPS and conf"
              loop: "{{ inv_add_apache_confs__configurations }}"
              loop_control:
                loop_var: vhost
              register: folder_check
              when: vhost.ssl
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ inv_add_apache_confs__conf_path }}/{{ vhost.server.name }}-HTTPS.conf"

            - name: "Check HTTPS conf: certs"
              loop: "{{ inv_add_apache_confs__configurations }}"
              loop_control:
                loop_var: vhost
              register: folder_check
              when: vhost.ssl.enabled | default(false)
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ vhost.ssl.crt }}"

            - name: "Check HTTPS conf: keys"
              loop: "{{ inv_add_apache_confs__configurations }}"
              loop_control:
                loop_var: vhost
              register: folder_check
              when: vhost.ssl.enabled | default(false)
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ vhost.ssl.key }}"

        - name: "Check Apache2 webserver"
          block:
            - name: "Check Apache2 connectivity"
              ansible.builtin.wait_for:
                host: "localhost"
                port: "{{ inv_add_apache_confs__http_listen_port }}"
                timeout: 120

            - name: "Check default vhost on HTTP"
              register: result
              failed_when: not (result.status == 200 or result.status == -1)
              ansible.builtin.uri:
                url: "http://localhost:{{ inv_add_apache_confs__http_listen_port }}/"
                method: "GET"

            - name: "Check default vhost on HTTPS"
              register: result
              failed_when: not (result.status == 200 or result.status == -1)
              ansible.builtin.uri:
                url: "https://localhost:{{ inv_add_apache_confs__https_listen_port }}/"
                method: "GET"
