---
- name: "Install Elasticsearch"
  hosts: "{{ tower_env | default([]) }}"
  gather_facts: true
  become: true
  become_method: sudo

  tasks:
    - name: "Install Elasticsearch"
      when: inv_install_elasticsearch | default(false)
      block:
        - name: "Include labocbz.prepare_host"
          tags:
            - "labocbz.prepare_host"
          vars:
            prepare_host__system_users: "{{ inv_prepare_host__elasticsearch_system_users }}"
          ansible.builtin.include_role:
            name: "labocbz.prepare_host"

        - name: "Include labocbz.add_certificates"
          tags:
            - "labocbz.add_certificates"
          loop: "{{ inv_elasticsearch_cert_bundles }}"
          loop_control:
            loop_var: bundle
          when: inv_elasticsearch_cert_bundles is defined
          vars:
            add_certificates__bundle_name: "{{ bundle.name }}"
            add_certificates__bundle_type: "{{ bundle.type }}"
            add_certificates__bundle_src: "{{ bundle.src }}"
            add_certificates__bundle_dest: "{{ bundle.dest }}"
            add_certificates__bundle_src_user: "{{ bundle.src_user }}"
            add_certificates__bundle_src_password: "{{ bundle.src_password }}"
            add_certificates__bundle_dest_user: "{{ bundle.dest_user }}"
            add_certificates__bundle_dest_group: "{{ bundle.dest_group }}"
            add_certificates__bundle_dest_mode: "{{ bundle.dest_mode }}"
          ansible.builtin.include_role:
            name: "labocbz.add_certificates"

        - name: "Update cacerts / flush handlers"
          ansible.builtin.meta: flush_handlers

        - name: "Include labocbz.install_java"
          tags:
            - "labocbz.install_java"
          vars:
            install_java__version: "{{ inv_install_java__version }}"
            install_java__cpu_architecture: "{{ inv_install_java__cpu_architecture }}"
            install_java__version_is_default: true
          ansible.builtin.include_role:
            name: "labocbz.install_java"

        - name: "Include labocbz.install_elasticsearch"
          tags:
            - "labocbz.install_elasticsearch"
          vars:
            install_elasticsearch__major_version: "{{ inv_install_elasticsearch__major_version }}"
            install_elasticsearch__port: "{{ inv_install_elasticsearch__port }}"
            install_elasticsearch__cluster_name: "{{ inv_install_elasticsearch__cluster_name }}"
            install_elasticsearch__elastic_password: "{{ inv_install_elasticsearch__elastic_password }}"
            install_elasticsearch__heap: "{{ inv_install_elasticsearch__heap }}"
            install_elasticsearch__data_path: "{{ inv_install_elasticsearch__data_path }}"
            install_elasticsearch__ssl_path: "{{ inv_install_elasticsearch__ssl_path }}"
            install_elasticsearch__config_path: "{{ inv_install_elasticsearch__config_path }}"
            install_elasticsearch__client_auth: "{{ inv_install_elasticsearch__client_auth }}"
            install_elasticsearch__ssl_authorities: "{{ inv_install_elasticsearch__ssl_authorities }}"
            install_elasticsearch__ssl: "{{ inv_install_elasticsearch__ssl }}"
            install_elasticsearch__ssl_key: "{{ inv_install_elasticsearch__ssl_key }}"
            install_elasticsearch__ssl_crt: "{{ inv_install_elasticsearch__ssl_crt }}"
            install_elasticsearch__seed_hosts: "{{ inv_install_elasticsearch__seed_hosts }}"
            install_elasticsearch__initial_master_nodes: "{{ inv_install_elasticsearch__initial_master_nodes }}"
          ansible.builtin.include_role:
            name: "labocbz.install_elasticsearch"

        - name: "Include labocbz.add_logrotate_confs"
          when: inv_add_logrotate_confs__elasticsearch_configurations | default(false)
          tags:
            - "labocbz.add_logrotate_confs"
          vars:
            add_logrotate_confs__files: "{{ inv_add_logrotate_confs__elasticsearch_configurations }}"
          ansible.builtin.include_role:
            name: "labocbz.add_logrotate_confs"

- name: "Install Logstash"
  hosts: "{{ tower_env | default([]) }}"
  gather_facts: true
  become: true
  become_method: sudo

  tasks:
    - name: "Install Logstash"
      when: inv_install_logstash | default(false)
      block:
        - name: "Include labocbz.prepare_host"
          tags:
            - "labocbz.prepare_host"
          vars:
            prepare_host__system_users: "{{ inv_prepare_host__logstash_system_users }}"
          ansible.builtin.include_role:
            name: "labocbz.prepare_host"

        - name: "Include labocbz.add_certificates"
          tags:
            - "labocbz.add_certificates"
          loop: "{{ inv_logstash_cert_bundles }}"
          loop_control:
            loop_var: bundle
          when: inv_logstash_cert_bundles is defined
          vars:
            add_certificates__bundle_name: "{{ bundle.name }}"
            add_certificates__bundle_type: "{{ bundle.type }}"
            add_certificates__bundle_src: "{{ bundle.src }}"
            add_certificates__bundle_dest: "{{ bundle.dest }}"
            add_certificates__bundle_src_user: "{{ bundle.src_user }}"
            add_certificates__bundle_src_password: "{{ bundle.src_password }}"
            add_certificates__bundle_dest_user: "{{ bundle.dest_user }}"
            add_certificates__bundle_dest_group: "{{ bundle.dest_group }}"
            add_certificates__bundle_dest_mode: "{{ bundle.dest_mode }}"
          ansible.builtin.include_role:
            name: "labocbz.add_certificates"

        - name: "Update cacerts / flush handlers"
          ansible.builtin.meta: flush_handlers

        - name: "Include labocbz.install_java"
          tags:
            - "labocbz.install_java"
          vars:
            install_java__version: "{{ inv_install_java__version }}"
            install_java__cpu_architecture: "{{ inv_install_java__cpu_architecture }}"
            install_java__version_is_default: true
          ansible.builtin.include_role:
            name: "labocbz.install_java"

        - name: "Include labocbz.install_logstash"
          tags:
            - "labocbz.install_logstash"
          vars:
            install_logstash__major_version: "{{ inv_install_logstash__major_version }}"
            install_logstash__config_path: "{{ inv_install_logstash__config_path }}"
            install_logstash__ssl_path: "{{ inv_install_logstash__ssl_path }}"
            install_logstash__pipelines_path: "{{ inv_install_logstash__pipelines_path }}"
            install_logstash__pipelines_reload: "{{ inv_install_logstash__pipelines_reload }}"
            install_logstash__pipelines: "{{ inv_install_logstash__pipelines }}"
            install_logstash__health_check_pipeline: "{{ inv_install_logstash__health_check_pipeline }}"
            install_logstash__api: "{{ inv_install_logstash__api }}"
            install_logstash__api_ports: "{{ inv_install_logstash__api_ports }}"
            install_logstash__api_auth_type: "{{ inv_install_logstash__api_auth_type }}"
            install_logstash__api_auth_login: "{{ inv_install_logstash__api_auth_login }}"
            install_logstash__api_auth_password: "{{ inv_install_logstash__api_auth_password }}"
            install_logstash__host: "{{ inv_install_logstash__host }}"
            install_logstash__cluster_name: "{{ inv_install_logstash__cluster_name }}"
            install_logstash__data_path: "{{ inv_install_logstash__data_path }}"
            install_logstash__group: "{{ inv_install_logstash__group }}"
            install_logstash__user: "{{ inv_install_logstash__user }}"
            install_logstash__ram: "{{ inv_install_logstash__ram }}"
            install_logstash__api_ssl: "{{ inv_install_logstash__api_ssl }}"
            install_logstash__api_jks: "{{ inv_install_logstash__api_jks }}"
            install_logstash__api_jks_password: "{{ inv_install_logstash__api_jks_password }}"
            install_logstash__beats_ssl: "{{ inv_install_logstash__beats_ssl }}"
            install_logstash__client_auth: "{{ inv_install_logstash__client_auth }}"
            install_logstash__ssl_authorities: "{{ inv_install_logstash__ssl_authorities }}"
            install_logstash__distributor_pipeline: "{{ inv_install_logstash__distributor_pipeline }}"
            install_logstash__ssl_crt: "{{ inv_install_logstash__ssl_crt }}"
            install_logstash__ssl_key: "{{ inv_install_logstash__ssl_key }}"
            install_logstash__api_p12: "{{ inv_install_logstash__api_p12 }}"
            install_logstash__ssl_p8: "{{ inv_install_logstash__ssl_p8 }}"
            install_logstash__loglevel: "{{ inv_install_logstash__loglevel }}"
            install_logstash__elasticsearch_shard: "{{ inv_install_logstash__elasticsearch_shard }}"
            install_logstash__elasticsearch_ssl: "{{ inv_install_logstash__elasticsearch_ssl }}"
            install_logstash__elasticsearch_login: "{{ inv_install_logstash__elasticsearch_login }}"
            install_logstash__elasticsearch_password: "{{ inv_install_logstash__elasticsearch_password }}"
            install_logstash__elasticsearch_hosts: "{{ inv_install_logstash__elasticsearch_hosts }}"
            install_logstash__elasticsearch_client_auth: "{{ inv_install_logstash__elasticsearch_client_auth }}"
            install_logstash__ssl_elastic: "{{ inv_install_logstash__ssl_elastic }}"
            install_logstash__ssl_elastic_jks: "{{ inv_install_logstash__ssl_elastic_jks }}"
            install_logstash__ssl_elastic_jks_password: "{{ inv_install_logstash__ssl_elastic_jks_password }}"
            install_logstash__ssl_elastic_key: "{{ inv_install_logstash__ssl_elastic_key }}"
            install_logstash__ssl_elastic_crt: "{{ inv_install_logstash__ssl_elastic_crt }}"
            install_logstash__ssl_elastic_p12: "{{ inv_install_logstash__ssl_elastic_p12 }}"
            install_logstash__ssl_elastic_p8: "{{ inv_install_logstash__ssl_elastic_p8 }}"
            install_logstash__ssl_elastic_authorities: "{{ inv_install_logstash__ssl_elastic_authorities }}"
          ansible.builtin.include_role:
            name: "labocbz.install_logstash"

        - name: "Include labocbz.add_logrotate_confs"
          when: inv_add_logrotate_confs__logstash_configurations | default(false)
          tags:
            - "labocbz.add_logrotate_confs"
          vars:
            add_logrotate_confs__files: "{{ inv_add_logrotate_confs__logstash_configurations }}"
          ansible.builtin.include_role:
            name: "labocbz.add_logrotate_confs"

- name: "Install Kibana"
  hosts: "{{ tower_env | default([]) }}"
  gather_facts: true
  become: true
  become_method: sudo

  tasks:
    - name: "Install Kibana"
      when: inv_install_kibana | default(false)
      block:
        - name: "Include labocbz.prepare_host"
          tags:
            - "labocbz.prepare_host"
          vars:
            prepare_host__system_users: "{{ inv_prepare_host__kibana_system_users }}"
          ansible.builtin.include_role:
            name: "labocbz.prepare_host"

        - name: "Include labocbz.add_certificates"
          tags:
            - "labocbz.add_certificates"
          loop: "{{ inv_kibana_cert_bundles }}"
          loop_control:
            loop_var: bundle
          when: inv_kibana_cert_bundles is defined
          vars:
            add_certificates__bundle_name: "{{ bundle.name }}"
            add_certificates__bundle_type: "{{ bundle.type }}"
            add_certificates__bundle_src: "{{ bundle.src }}"
            add_certificates__bundle_dest: "{{ bundle.dest }}"
            add_certificates__bundle_src_user: "{{ bundle.src_user }}"
            add_certificates__bundle_src_password: "{{ bundle.src_password }}"
            add_certificates__bundle_dest_user: "{{ bundle.dest_user }}"
            add_certificates__bundle_dest_group: "{{ bundle.dest_group }}"
            add_certificates__bundle_dest_mode: "{{ bundle.dest_mode }}"
          ansible.builtin.include_role:
            name: "labocbz.add_certificates"

        - name: "Update cacerts / flush handlers"
          ansible.builtin.meta: flush_handlers

        - name: "Include labocbz.install_java"
          tags:
            - "labocbz.install_java"
          vars:
            install_java__version: "{{ inv_install_java__version }}"
            install_java__cpu_architecture: "{{ inv_install_java__cpu_architecture }}"
            install_java__version_is_default: true
          ansible.builtin.include_role:
            name: "labocbz.install_java"

        - name: "Include labocbz.install_kibana"
          tags:
            - "labocbz.install_kibana"
          vars:
            install_kibana__major_version: "{{ inv_install_kibana__major_version }}"
            install_kibana__config_path: "{{ inv_install_kibana__config_path }}"
            install_kibana__port: "{{ inv_install_kibana__port }}"
            install_kibana__cluster_name: "{{ inv_install_kibana__cluster_name }}"
            install_kibana__rewrite_base_path: "{{ inv_install_kibana__rewrite_base_path }}"
            install_kibana__base_path: "{{ inv_install_kibana__base_path }}"
            install_kibana__public_pase_url: "{{ inv_install_kibana__public_pase_url }}"
            install_kibana__ssl: "{{ inv_install_kibana__ssl }}"
            install_kibana__ssl_path: "{{ inv_install_kibana__ssl_path }}"
            install_kibana__elasticsearch_port: "{{ inv_install_kibana__elasticsearch_port }}"
            #install_kibana__service_account_token: "{{ inv_install_kibana__service_account_token }}"
            install_kibana__service_account_token_basename: "{{ inv_install_kibana__service_account_token_basename }}"
            install_kibana__elastic_password: "{{ inv_install_kibana__elastic_password }}"
            install_kibana__elastic_user: "{{ inv_install_kibana__elastic_user }}"
            install_kibana__elastic_protocol: "{{ inv_install_kibana__elastic_protocol }}"
            install_kibana__elastic_hosts: "{{ inv_install_kibana__elastic_hosts }}"
            install_kibana__elastic_client_auth: "{{ inv_install_kibana__elastic_client_auth }}"
            install_kibana__ssl_authorities: "{{ inv_install_kibana__ssl_authorities }}"
            install_kibana__ssl_key: "{{ inv_install_kibana__ssl_key }}"
            install_kibana__ssl_crt: "{{ inv_install_kibana__ssl_crt }}"
            install_kibana__elastic_ssl_authorities: "{{ inv_install_kibana__elastic_ssl_authorities }}"
            install_kibana__elastic_ssl_key: "{{ inv_install_kibana__elastic_ssl_key }}"
            install_kibana__elastic_ssl_crt: "{{ inv_install_kibana__elastic_ssl_crt }}"
          ansible.builtin.include_role:
            name: "labocbz.install_kibana"

        - name: "Include labocbz.add_logrotate_confs"
          when: inv_add_logrotate_confs__kibana_configurations | default(false)
          tags:
            - "labocbz.add_logrotate_confs"
          vars:
            add_logrotate_confs__files: "{{ inv_add_logrotate_confs__kibana_configurations }}"
          ansible.builtin.include_role:
            name: "labocbz.add_logrotate_confs"

    - name: "Install Apache2"
      when: inv_install_apache | default(false)
      block:
        - name: "Include labocbz.prepare_host"
          tags:
            - "labocbz.prepare_host"
          ansible.builtin.include_role:
            name: "labocbz.prepare_host"

        - name: "Include labocbz.add_certificates"
          tags:
            - "labocbz.add_certificates"
          loop: "{{ inv_add_apache_confs__configurations_cert_bundles }}"
          loop_control:
            loop_var: bundle
          when: inv_add_apache_confs__configurations_cert_bundles is defined
          vars:
            add_certificates__bundle_name: "{{ bundle.name }}"
            add_certificates__bundle_type: "{{ bundle.type }}"
            add_certificates__bundle_src: "{{ bundle.src }}"
            add_certificates__bundle_dest: "{{ bundle.dest }}"
            add_certificates__bundle_src_user: "{{ bundle.src_user }}"
            add_certificates__bundle_src_password: "{{ bundle.src_password }}"
            add_certificates__bundle_dest_user: "{{ bundle.dest_user }}"
            add_certificates__bundle_dest_group: "{{ bundle.dest_group }}"
            add_certificates__bundle_dest_mode: "{{ bundle.dest_mode }}"
          ansible.builtin.include_role:
            name: "labocbz.add_certificates"

        - name: "Update cacerts / flush handlers"
          ansible.builtin.meta: flush_handlers

        - name: "Include labocbz.install_apache"
          tags:
            - "labocbz.install_apache"
          vars:
            install_apache__https_listen_port: "{{ inv_install_apache__https_listen_port }}"
            install_apache__http_listen_port: "{{ inv_install_apache__http_listen_port }}"
            install_apache__modules: "{{ inv_install_apache__modules }}"
            install_apache__enable_qos: "{{ inv_install_apache__enable_qos }}"
            install_apache__enable_security: "{{ inv_install_apache__enable_security }}"
            install_apache__security_core_version: "{{ inv_install_apache__security_core_version }}"
            install_apache__remove_all_vhosts: "{{ inv_install_apache__remove_all_vhosts }}"
            install_apache__loglevel: "{{ inv_install_apache__loglevel }}"
            install_apache__security_version: "{{ inv_install_apache__security_version }}"
            install_apache__enable_evasive: "{{ inv_install_apache__enable_evasive }}"
            install_apache__enable_pagespeed: "{{ inv_install_apache__enable_pagespeed }}"
            install_apache__enable_prefork: "{{ inv_install_apache__enable_prefork }}"
          ansible.builtin.include_role:
            name: "labocbz.install_apache"

        - name: "Include labocbz.add_apache_confs"
          tags:
            - "labocbz.add_apache_confs"
          vars:
            add_apache_confs__http_listen_port: "{{ inv_add_apache_confs__http_listen_port }}"
            add_apache_confs__https_listen_port: "{{ inv_add_apache_confs__https_listen_port }}"
            add_apache_confs__ldap_url: "{{ inv_add_apache_confs__ldap_url }}"
            add_apache_confs__ldap_port: "{{ inv_add_apache_confs__ldap_port }}"
            add_apache_confs__ldap_dc: "{{ inv_add_apache_confs__ldap_dc }}"
            add_apache_confs__auth_ldap_url: "{{ inv_add_apache_confs__auth_ldap_url }}"
            add_apache_confs__custom_ldap_base_header: "{{ inv_add_apache_confs__custom_ldap_base_header }}"
            add_apache_confs__webmaster: "{{ inv_add_apache_confs__webmaster }}"
            add_apache_confs__request_body: "{{ inv_add_apache_confs__request_body }}"
            add_apache_confs__security_body_limit: "{{ inv_add_apache_confs__security_body_limit }}"
            add_apache_confs__ssl_files_path: "{{ inv_add_apache_confs__ssl_files_path }}"
            add_apache_confs__conf_path: "{{ inv_add_apache_confs__conf_path }}"
            add_apache_confs__base_document_root: "{{ inv_add_apache_confs__base_document_root }}"
            add_apache_confs__configurations: "{{ inv_add_apache_confs__configurations }}"
          ansible.builtin.include_role:
            name: "labocbz.add_apache_confs"

        - name: "Include labocbz.add_logrotate_confs"
          when: inv_add_logrotate_confs__apache_configurations | default(false)
          tags:
            - "labocbz.add_logrotate_confs"
          vars:
            add_logrotate_confs__files: "{{ inv_add_logrotate_confs__apache_configurations }}"
          ansible.builtin.include_role:
            name: "labocbz.add_logrotate_confs"

        - name: "Block all trafic from other hosts on port 80 (disable acces to Kibana without Apache2)"
          ansible.builtin.iptables:
            chain: "INPUT"
            protocol: "tcp"
            destination_port: "{{ inv_install_kibana__port }}"
            jump: "DROP"
            source: "! 127.0.0.1"
            comment: "Force external user to use Apache2"
